// Date: 8/2/2014 6:45:54 AM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX






package fantastic.renders.tiles;

import static org.lwjgl.opengl.GL11.GL_CULL_FACE;
import static org.lwjgl.opengl.GL11.glDisable;
import static org.lwjgl.opengl.GL11.glEnable;
import static org.lwjgl.opengl.GL11.glPopMatrix;
import static org.lwjgl.opengl.GL11.glPushMatrix;
import static org.lwjgl.opengl.GL11.glRotatef;
import static org.lwjgl.opengl.GL11.glTranslated;
import net.minecraft.block.Block;
import net.minecraft.client.Minecraft;
import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.client.renderer.RenderBlocks;
import net.minecraft.client.renderer.tileentity.TileEntitySpecialRenderer;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.ResourceLocation;
import net.minecraft.world.IBlockAccess;

import org.lwjgl.opengl.GL11;

import cpw.mods.fml.client.FMLClientHandler;
import cpw.mods.fml.client.registry.ISimpleBlockRenderingHandler;
import fantastic.FantasticIds;
import fantastic.FantasticInfo;
import fantastic.tiles.TileAirCompressor;

public class RenderAirCompressor extends TileEntitySpecialRenderer implements ISimpleBlockRenderingHandler
{
	private final ResourceLocation TEXTURE = new ResourceLocation(FantasticInfo.ID + ":textures/blocks/air_compressor.png");

	private TileAirCompressor ACEntity = null;
	public static ModelBase model = new ModelBase()
	{

	};
  //fields
    ModelRenderer Shape1;
    ModelRenderer Shape2;
    ModelRenderer Shape3;
    ModelRenderer AShape3;
    ModelRenderer Shape4;
    ModelRenderer Shape5;
    ModelRenderer AShape5;
    ModelRenderer Shape6;
    ModelRenderer Shape7;
    ModelRenderer Shape8;
    ModelRenderer Shape9;
    ModelRenderer Shape10;
    ModelRenderer AShape10;
    ModelRenderer BShape10;
    ModelRenderer CShape10;
    ModelRenderer DShape10;
    ModelRenderer Shape11;
    
    ModelRenderer ExtraTank1;
    ModelRenderer ExtraTank2;
    ModelRenderer ExtraNozzle1;
    ModelRenderer ExtraNozzle2;
    

    ModelRenderer Pump;
    ModelRenderer Shaft;
  
  public RenderAirCompressor()
  {

	  model.textureHeight = 64;
	  model.textureWidth = 64;
	  
      Shape1 = new ModelRenderer(model, 0, 0);
      Shape1.addBox(-8F, 20F, -8F, 16, 3, 16);
      Shape1.setRotationPoint(0F, 0F, 0F);
      Shape1.setTextureSize(64, 64);
      Shape1.mirror = true;
      setRotation(Shape1, 0F, 0F, 0F);
      Shape2 = new ModelRenderer(model, 0, 19);
      Shape2.addBox(-7F, 8F, -16F, 14, 8, 8);
      Shape2.setRotationPoint(0F, 0F, 0F);
      Shape2.setTextureSize(64, 64);
      Shape2.mirror = true;
      setRotation(Shape2, 0.7853982F, 0F, 0F);
      Shape3 = new ModelRenderer(model, 0, 0);
      Shape3.addBox(7F, 13F, -2F, 1, 7, 4);
      Shape3.setRotationPoint(0F, 0F, 0F);
      Shape3.setTextureSize(64, 64);
      Shape3.mirror = true;
      setRotation(Shape3, 0F, 0F, 0F);
      AShape3 = new ModelRenderer(model, 0, 0);
      AShape3.addBox(-8F, 13F, -2F, 1, 7, 4);
      AShape3.setRotationPoint(0F, 0F, 0F);
      AShape3.setTextureSize(64, 64);
      AShape3.mirror = true;
      setRotation(AShape3, 0F, 0F, 0F);
      Shape4 = new ModelRenderer(model, 38, 20);
      Shape4.addBox(2F, 11.2F, -2F, 4, 2, 4);
      Shape4.setRotationPoint(0F, 0F, 0F);
      Shape4.setTextureSize(64, 64);
      Shape4.mirror = true;
      setRotation(Shape4, 0F, 0F, 0F);
      Shape5 = new ModelRenderer(model, 44, 35);
      Shape5.addBox(-2F, -4F, -2F, 4, 1, 4);
      Shape5.setRotationPoint(4F, 11.3F, 0F);
      Shape5.setTextureSize(64, 64);
      Shape5.mirror = true;
      setRotation(Shape5, 0F, 0F, 0F);
      AShape5 = new ModelRenderer(model, 44, 27);
      AShape5.addBox(-1.5F, -3F, -1.5F, 3, 4, 3);
      AShape5.setRotationPoint(4F, 11.3F, 0F);
      AShape5.setTextureSize(64, 64);
      AShape5.mirror = true;
      setRotation(AShape5, 0F, 0F, 0F);
      Shape7 = new ModelRenderer(model, 0, 11);
      Shape7.addBox(-5.5F, 11F, -1.5F, 3, 2, 3);
      Shape7.setRotationPoint(0F, 0F, 0F);
      Shape7.setTextureSize(64, 64);
      Shape7.mirror = true;
      setRotation(Shape7, 0F, 0F, 0F);
      Shape6 = new ModelRenderer(model, 0, 35);
      Shape6.addBox(-6F, 11F, -8F, 4, 9, 4);
      Shape6.setRotationPoint(0F, 0F, 0F);
      Shape6.setTextureSize(64, 64);
      Shape6.mirror = true;
      setRotation(Shape6, 0F, 0F, 0F);
      Shape8 = new ModelRenderer(model, 16, 36);
      Shape8.addBox(-5.5F, 10.5F, -7.5F, 3, 1, 3);
      Shape8.setRotationPoint(0F, 0F, 0F);
      Shape8.setTextureSize(64, 64);
      Shape8.mirror = true;
      setRotation(Shape8, 0F, 0F, 0F);
      Shape9 = new ModelRenderer(model, 18, 40);
      Shape9.addBox(-5F, 10F, -7F, 2, 1, 2);
      Shape9.setRotationPoint(0F, 0F, 0F);
      Shape9.setTextureSize(64, 64);
      Shape9.mirror = true;
      setRotation(Shape9, 0F, 0F, 0F);
      Shape10 = new ModelRenderer(model, 0, 51);
      Shape10.addBox(-0.5F, -3F, -5.5F, 1, 1, 5);
      Shape10.setRotationPoint(-4F, 11F, 0F);
      Shape10.setTextureSize(64, 64);
      Shape10.mirror = true;
      setRotation(Shape10, 0F, 0F, 0F);
      AShape10 = new ModelRenderer(model, 0, 58);
      AShape10.addBox(-0.5F, 2F, -6F, 1, 1, 1);
      AShape10.setRotationPoint(-4F, 11F, 0F);
      AShape10.setTextureSize(64, 64);
      AShape10.mirror = true;
      setRotation(AShape10, -0.7853982F, 0F, 0F);
      BShape10 = new ModelRenderer(model, 0, 49);
      BShape10.addBox(-0.5F, -2F, -0.5F, 1, 2, 1);
      BShape10.setRotationPoint(-4F, 11F, 0F);
      BShape10.setTextureSize(64, 64);
      BShape10.mirror = true;
      setRotation(BShape10, 0F, 0F, 0F);
      CShape10 = new ModelRenderer(model, 0, 61);
      CShape10.addBox(-0.5F, -2F, -6.5F, 1, 1, 1);
      CShape10.setRotationPoint(-4F, 11F, 0F);
      CShape10.setTextureSize(64, 64);
      CShape10.mirror = true;
      setRotation(CShape10, 0F, 0F, 0F);
      DShape10 = new ModelRenderer(model, 0, 53);
      DShape10.addBox(-0.5F, -2.3F, 0.8F, 1, 1, 1);
      DShape10.setRotationPoint(-4F, 11F, 0F);
      DShape10.setTextureSize(64, 64);
      DShape10.mirror = true;
      setRotation(DShape10, 0.7853982F, 0F, 0F);
      Shape11 = new ModelRenderer(model, 49, 0);
      Shape11.addBox(-1F, 11F, 4F, 2, 2, 1);
      Shape11.setRotationPoint(0F, 0F, 0F);
      Shape11.setTextureSize(64, 64);
      Shape11.mirror = true;
      setRotation(Shape11, -0.5235988F, 0F, 0F);
      

      ExtraNozzle1 = new ModelRenderer(model, 0, 35);
      ExtraNozzle1.addBox(-3.8F, 11F, -8F, 4, 9, 4);
      ExtraNozzle1.setRotationPoint(0F, 0F, 0F);
      ExtraNozzle1.setTextureSize(64, 64);
      ExtraNozzle1.mirror = true;
      setRotation(ExtraNozzle1, 0F, 0F, 0F);
      ExtraTank1 = new ModelRenderer(model, 16, 36);
      ExtraTank1.addBox(-3.3F, 10.5F, -7.5F, 3, 1, 3);
      ExtraTank1.setRotationPoint(0F, 0F, 0F);
      ExtraTank1.setTextureSize(64, 64);
      ExtraTank1.mirror = true;
      setRotation(ExtraTank1, 0F, 0F, 0F);
      
      ExtraNozzle2 = new ModelRenderer(model, 0, 35);
      ExtraNozzle2.addBox(-8.2F, 11F, -8F, 4, 9, 4);
      ExtraNozzle2.setRotationPoint(0F, 0F, 0F);
      ExtraNozzle2.setTextureSize(64, 64);
      ExtraNozzle2.mirror = true;
      setRotation(ExtraNozzle2, 0F, 0F, 0F);
      ExtraTank2 = new ModelRenderer(model, 16, 36);
      ExtraTank2.addBox(-7.7F, 10.5F, -7.5F, 3, 1, 3);
      ExtraTank2.setRotationPoint(0F, 0F, 0F);
      ExtraTank2.setTextureSize(64, 64);
      ExtraTank2.mirror = true;
      setRotation(ExtraTank2, 0F, 0F, 0F);
      

      Pump = new ModelRenderer(model, 44, 35);
      Pump.addBox(-2F, -1.8F, -2F, 4, 1, 4);
      Pump.setRotationPoint(4F, 11.3F, 0F);
      Pump.setTextureSize(64, 64);
      Pump.mirror = true;
      setRotation(Pump, 0F, 0F, 0F);

      Shaft = new ModelRenderer(model, 44, 27);
      Shaft.addBox(-1.5F, -0.8F, -1.5F, 3, 4, 3);
      Shaft.setRotationPoint(4F, 11.3F, 0F);
      Shaft.setTextureSize(64, 64);
      Shaft.mirror = true;
      setRotation(Shaft, 0F, 0F, 0F);
  }
  
  public void render(float f5)
  {
	  glDisable(GL_CULL_FACE);
    Shape1.render(f5);
    Shape2.render(f5);
    Shape3.render(f5);
    AShape3.render(f5);
    Shape4.render(f5);
	Shape7.render(f5);
    Shape9.render(f5);
    Shape10.render(f5);
    AShape10.render(f5);
    BShape10.render(f5);
    CShape10.render(f5);
    DShape10.render(f5);
    Shape11.render(f5);
    
    if(this.ACEntity != null)
    {
    	if(ACEntity.getSingleTank())
    	{
    		Shape6.render(f5);
    		Shape8.render(f5);
    	}
    	else if(ACEntity.getDoubleTank())
    	{
    		ExtraTank1.render(f5);
    		ExtraNozzle1.render(f5);

    		ExtraTank2.render(f5);
    		ExtraNozzle2.render(f5);
    	}
    	
    	if(ACEntity.getTankDamage() %2 == 0)
    	{

            Shape5.render(f5);
            AShape5.render(f5);
    	}
    	else
    	{
    		Pump.render(f5);
    		Shaft.render(f5);
    	}
    }
    else
    {

        Shape5.render(f5);
        AShape5.render(f5);
    }
    glEnable(GL_CULL_FACE);
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  @Override
	public void renderTileEntityAt(TileEntity tile, double x, double y, double z, float f)
	{
	  if(tile instanceof TileAirCompressor)
	  {
		  this.ACEntity = (TileAirCompressor)tile;
	  }
		glPushMatrix();
		glTranslated(x + 0.5D, y + 1.435D, z + 0.5D);
		glRotatef(180F, 1F, 0F, 0F);

		Minecraft.getMinecraft().renderEngine.bindTexture(this.TEXTURE);
		this.render(0.0625F);
		glPopMatrix();
	}

@Override
public void renderInventoryBlock(Block block, int metadata, int modelId, RenderBlocks renderer) 
{
	glPushMatrix();
	GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
	GL11.glEnable(GL11.GL_DEPTH_TEST);
	glTranslated(0, 0.3F, 0);
	glRotatef(180F, 1F, 0F, 0F);
	glRotatef(90F, 0F, 1F, 0F);
	FMLClientHandler.instance().getClient().renderEngine.bindTexture(this.TEXTURE);
	this.render(0.0625F);
	GL11.glPopAttrib();
	glPopMatrix();
	
}

@Override
// messed up with model rendering
public boolean renderWorldBlock(IBlockAccess world, int x, int y, int z, Block block, int modelId, RenderBlocks renderer)
{

	return false;
}

@Override
public boolean shouldRender3DInInventory(int modelId)
{
	return true;
}

@Override
public int getRenderId()
{
	return FantasticIds.airCompressorRenderingID;
}



}
